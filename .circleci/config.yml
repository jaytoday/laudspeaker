version: 2.1
jobs:
  build_and_deploy_production:
    docker:
      - image: cimg/node:18.12
    steps:
      - save_cache:
          key: v1-cache
          paths:
            - project/
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          command: |
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install awscli
            export AWS_ACCESS_KEY_ID=$DEMO_AWS_KEY
            export AWS_SECRET_ACCESS_KEY=$DEMO_AWS_SECRET
            aws configure set region $DEMO_AWS_REGION
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 427506656486.dkr.ecr.us-east-1.amazonaws.com
            docker build -f Dockerfile.prod.client -t laudspeaker:latest .
            docker build -f Dockerfile.prod.server -t laudspeaker:api-latest .
            docker tag laudspeaker:api-latest 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:api-latest
            docker tag laudspeaker:latest 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:latest
            docker push 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:api-latest
            docker push 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:latest
            aws ecs update-service --cluster ecs-demo --service api --force-new-deployment
            aws ecs update-service --cluster frontend --service frontend --force-new-deployment

  build_and_deploy_staging:
    docker:
      - image: circleci/node:16
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
            export AWS_ACCESS_KEY_ID=$DEMO_AWS_KEY
            export AWS_SECRET_ACCESS_KEY=$DEMO_AWS_SECRET
            aws configure set region $DEMO_AWS_REGION
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --build-arg="EXTERNAL_URL=$EXTERNAL_URL" --build-arg="FRONTEND_SENTRY_AUTH_TOKEN=$FRONTEND_SENTRY_AUTH_TOKEN" --build-arg="BACKEND_SENTRY_AUTH_TOKEN=$BACKEND_SENTRY_AUTH_TOKEN" --build-arg="REACT_APP_POSTHOG_HOST=$REACT_APP_POSTHOG_HOST" --build-arg="REACT_APP_POSTHOG_KEY=$REACT_APP_POSTHOG_KEY" --build-arg="REACT_APP_ONBOARDING_API_KEY=$REACT_APP_ONBOARDING_API_KEY" -f Dockerfile -t laudspeaker/laudspeaker:latest .
            docker push laudspeaker/laudspeaker:latest
            aws ecs update-service --cluster staging --service staging --force-new-deployment
  test:
    docker:
      - image: circleci/node:16
        environment:
          TERM: xterm

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - run: npm install --legacy-peer-deps
      - run: docker build -f Dockerfile.dev.client -t laudspeaker:latest .
      - run: docker build -f Dockerfile.dev.server -t laudspeaker:api-latest .
      - run: sudo apt-get update
      - run: sudo apt-get install --fix-missing libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - run: docker-compose -f ./docker-compose.dev.yml up --abort-on-container-exit
      # - run: sleep 60
      # - run: docker ps
      # - run: cd packages/client && npm run test:e2e
workflows:
  pull_request:
    jobs:
      - test
      # - cypress/run:
      #     pre-steps:
      #       - checkout
      #       - setup_remote_docker:
      #           version: 20.10.14
      #           docker_layer_caching: true
      #       - run: docker build -f Dockerfile.dev.server -t laudspeaker:api-latest .
      #       - run: docker-compose -f ./docker-compose.dev.yml up -d
      #       - run: sudo apt-get update
      #       - run: sudo apt-get install --fix-missing libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      #     start: npm run start:client:ci
      #     wait-on: 'http://localhost:3000'
      #     command: npm run test:e2e:client
      #     executor: base16
  staging:
    jobs:
      - build_and_deploy_staging:
          filters:
            branches:
              only:
                - staging
  production:
    jobs:
      - build_and_deploy_production:
          filters:
            branches:
              only:
                - production
